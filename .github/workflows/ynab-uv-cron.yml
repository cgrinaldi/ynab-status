name: YNAB Daily Run (uv)

on:
  schedule:
    # 07:00 America/Los_Angeles year-round (cron runs in UTC)
    - cron: "0 14 * 3-11 *"   # Mar–Nov → 14:00 UTC
    - cron: "0 15 * 1-2,12 *" # Dec–Feb → 15:00 UTC
  workflow_dispatch: {}

concurrency:
  group: ynab-daily
  cancel-in-progress: false

permissions:
  contents: read

env:
  # Put the venv in the repo so we can cache it precisely
  UV_PROJECT_ENVIRONMENT: .venv

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # If you pin Python in pyproject.toml, uv will fetch it automatically.
      # Keep this to guarantee 3.11 availability on the runner.
      - name: Ensure Python 3.11 available via uv
        run: uv python install 3.11

      - name: Cache uv virtualenv (tied to uv.lock)
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-uv311-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv311-

      - name: Sync dependencies from lock (strict, reproducible)
        # --frozen + --locked refuse resolution changes; fails if lock/env mismatch
        run: uv sync --frozen

      - name: Restore app state (last email sent)
        id: restore-state
        uses: actions/cache/restore@v4
        with:
          path: .state
          # Restore the most recent state regardless of exact key
          key: app-state-${{ hashFiles('.state/email_state.json') }}
          restore-keys: |
            app-state-

      - name: Write Gmail OAuth files
        env:
          GMAIL_CREDENTIALS_JSON: ${{ secrets.GMAIL_CREDENTIALS_JSON }}
          GMAIL_TOKEN_JSON: ${{ secrets.GMAIL_TOKEN_JSON }}
        run: |
          printf '%s' "$GMAIL_CREDENTIALS_JSON" > credentials.json
          printf '%s' "$GMAIL_TOKEN_JSON" > token.json

      # Reconstruct Gmail OAuth files from encrypted repo secrets.
      - name: Write Gmail OAuth files
        env:
          GMAIL_CREDENTIALS_JSON: ${{ secrets.GMAIL_CREDENTIALS_JSON }}
          GMAIL_TOKEN_JSON: ${{ secrets.GMAIL_TOKEN_JSON }}
        run: |
          printf '%s' "$GMAIL_CREDENTIALS_JSON" > credentials.json
          printf '%s' "$GMAIL_TOKEN_JSON" > token.json

      - name: Run app.main
        env:
          YNAB_API_KEY: ${{ secrets.YNAB_API_KEY }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}

          # add any additional config your app expects
        run: uv run -m app.main

      - name: Save app state if changed
        # Save only when the state file exists and its hash differs from the restored key
        if: ${{ hashFiles('.state/email_state.json') != '' && steps.restore-state.outputs.cache-matched-key != format('app-state-{0}', hashFiles('.state/email_state.json')) }}
        uses: actions/cache/save@v4
        with:
          path: .state
          key: app-state-${{ hashFiles('.state/email_state.json') }}
